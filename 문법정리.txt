a = float(input())  //실수입력
b = round(a, 2) //소수점 3번째에서 반올림처리해서 2번째까지만 나타내기
print('%.2f' % b) //소수점 둘째자리까지만 나타내기
input()은 입력받은걸 문자열로 나타냄
input().split()은 입력받은 문자열을 공백으로 나눠서 리스트로 만듬
map(int,input().split())은 만들어진 리스트의 모든원소에 int 함수 적용
list(map(int,input().split()))는 모든 원소에 int함수 적용시킨 결과를 다시 리스트로 만듬

y, m, d = map(int, input().split('.'))  //.으로 나눠진걸 int로 만들고
print('%d.%02d.%02d' % (y, m, d)) // 문자열형식으로 나타낼건데 들어갈 변수는 따로 %로 넣는다 %02

a,b=input().split('.') //.을 기준으로 문자열 두개를 받는데
print(a+b) 하면 붙여서 문자열로나오는데
print(a,b) 하면 a나오고 한 칸 띄고(스페이스) b가 나온다


data = input()
for i in range(len(data)): //문자열도 배열이니까 인덱스 존재
    print("["+str(int(data[i])*(10**(len(data)-(i+1))))+"]") // **은 제곱,int로 바꾼거는 +로 출력하려면 다시 str해주자 

enumerate 함수는 index랑 value를 튜플로 반환하는데 보통 for문에서 많이 쓰인다.

dict1 = {'이름': '한사람', '나이': 33}
data = enumerate(dict1)
for i, key in data:
    print(i, ":", key, '->', dict1[key])
print()
하면
0 : 이름 -> 한사람
1 : 나이 -> 33
나온다 

2진수 : bin()
8진수 : oct()
16진수 : hex()

counter함수

find 함수는 찾는 문자가 문자열 안에 포함되지 않은 경우 -1을 출력하지만 index함수는 >AttributeError가 발생한다
리스트 자료형이면 index 사용(찾으려는 값이 있다는 가정)

for x in alphabet:
    print(s.find(x), end=' ') //붙여서 쓰는법

파이썬처럼 생각하자
여러번 반복 출력은 곱하기를 사용해도된다.
for i in range(len(s)):
        print(s[i]*r, end='')

a[1:4]는 a[1]~a[3]까지 가져오고 이것을 슬라이싱이라한다.

슬라이싱
>>> a = ['a', 'b', 'c', 'd', 'e']
>>> a[ 1 :  ]
['b', 'c', 'd', 'e']

>>> a = ['a', 'b', 'c', 'd', 'e']
>>> a[ -3 :  ]
['c', 'd', 'e']

>>> a = ['a', 'b', 'c', 'd', 'e']
>>> a[  : 2 ]
['a', 'b']

>>> a = ['a', 'b', 'c', 'd', 'e']
>>> a[  : -1 ]
['a', 'b', 'c', 'd']

>>> a = ['a', 'b', 'c', 'd', 'e']
>>> a[ 2 : 4 ]
['c', 'd']

>>> a = ['a', 'b', 'c', 'd', 'e']
>>> a[ -4 : -2 ]
['b', 'c']

>>> a = ['a', 'b', 'c', 'd', 'e']
# 인덱스 1 ~ 3까지의 값을 거꾸로 가져오기
>>> a[ 3 : 0 : -1]
['d', 'c', 'b']

>>> a = ['a', 'b', 'c', 'd', 'e']
# 2칸씩 이동하면서 가져옵니다.
>>> a[ : : 2 ]
['a', 'c', 'e']

>>> a = ['a', 'b', 'c', 'd', 'e']
# 3칸씩 이동하면서 가져옵니다.
>>> a[ -5 : : 3 ]
['a', 'd']

>>> a = ['a', 'b', 'c', 'd', 'e']
# 전체를 거꾸로 가져옵니다.
>>> a[ : : -1 ]
['e', 'd', 'c', 'b', 'a']

>>> a = ['a', 'b', 'c', 'd', 'e']
>>> a[ 3 : : -1 ]
['d', 'c', 'b', 'a']

리스트 컴프리헨션 : 리스트를 초기화하는 방법 
1) 0~19까지 수 중 홀수만 포함하는 리스트
   array=[i for i in range(20) if i%2==1]
2) 1~9까지 수의 제곱 값을 포함하는 리스트
   array=[i*i for i in range(1,10)]

중요) 2차원 리스트 초기화
n=3 m=3
array=[[0]*m for _ in range(n)]   

upper()함수는 문자열을 대문자로 바꿔준다.
set함수가 중복제거해준다.

안되는 경우에 대해 생각해보자+슬라이싱 1316.py

array=[]
reverse 함수는 return 하는게 없다. 그냥 바꿔버림
array.reverse() 하면 array가 바뀜
reversed(array)하면  ‘listreverseiterator’를 반환 
list로 출력하려면 list(reversed(array))처럼 사용하자

sort 함수도 마찬가지 return 하는게 없다.
sorted(array)하면 새로운 리스트 반환
array=sorted(array,reverse=True) 하면 내림차순 정렬
sorted(array,key=setting) 하면 setting 함수가 정렬기준이된다.
def seeting(data):
    return data[1] //예시로 1번째 인덱스 return 하는 함수

result = sorted(array,key=lambda student:student[1])   
sorted할건데 student를 매개변수로해서 return student[1]을 기준으로 오름차순

 a[i],b[i]=b[i],a[i] //swap 연산

 파이썬의 기본 정렬 함수가 O(nlog(n))
 input()과 print()함수를 사용하지 않고 
 import sys를 통해서 system input과 system output을 사용
 sys.stdin.readline()))
 sys.stdout.write(str(i)+'\n') 
 시간초과 해결함

알파벳 sort는 앞글자기준 같으면 그다음글자 비교해서 sort함

lower(),upper() 함수는 실행만시키면 원본 문자열은 변화 없음 lower하거나 upper한걸 return함

#zip함수
Number = [1,2,3,4]
Name = ['hong','gil','dong','nim']
Number_Name = list(zip(Number,name))
print(Number_Name)
결과 : [(1 ,'hong'), (2 ,'gil'), (3 ,'dong'), (4 ,'nim')]

Number = [1,2,3,4]
Name = ['hong','gil','dong','nim']
dic = {}
for number , name in zip(Number,Name): 
    dic[number] = name
print(dic)
결과 : {1 : 'hong' , 2 : 'gil' , 3 : 'dong' , 4 : 'nim'}

사전자료형
data = {'A':'best!!!', 'B':'good!!', 'C':'run!', 'D':'slowly~'}
print(data['A']) 하면 'best!!!'
data.keys()하면 dict_keys(['A', 'B', 'C', 'D'])
data.values()하면 dict_values(['best!!!', 'good!!', 'run!', 'slowly~'])

 location = {'1': (0, 0), '2': (0, 1), '3': (0, 2),
                    '4': (1, 0), '5': (1, 1), '6': (1, 2),
                    '7': (2, 0), '8': (2, 1), '9': (2, 2),
                    '*': (3, 0), '0': (3, 1), '#': (3, 2)}
 여기에서 '#':(3,2)에서 2만 뽑아내고 싶으면
 location['#'][1]이 2를 의미한다.                


 import math하면
 math.sqrt(n)하면 n의 제곱근
 a=pow(2,3) 하면 2의3제곱인 8
 pow(n,0.5) 하면 루트n과 같음
 a가 1.46545465일때 int(a)하면 1

print(result)   ==> ['A','B','C','K','K','13']
print(''.join(result))    ==>ABCKK13
붙여쓰기 할때 씀

a='hijino'
b=list(a)
b.reverse()
b=''.join(b)
print(b)  하면
onijih

a='hijino'
b=a[::-1]
print(b)  하면

onijih


